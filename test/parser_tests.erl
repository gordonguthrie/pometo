-module(parser_tests).

-compile([export_all]).

-include_lib("eunit/include/eunit.hrl").

-include("parser_records.hrl").

%% Tests

basic_dyadic_plus_vector_test_() ->
	Str = "1.1 2.2 + 3.3 4.4",
	Got = pometo:parse_TEST(Str),
	Shp1 = #'$shape¯'{dimensions = [2],
                    type       = number,
                    line_no    = 1,
                    char_no    = 1},
  Arg1 = #'$ast¯'{do      = Shp1,
                  args    = [1.1, 2.2],
                  char_no = 1,
                  line_no = 1},
	Shp2 = #'$shape¯'{dimensions = [2],
                    type       = number,
                    line_no    = 1,
                    char_no    = 11},
  Arg2 = #'$ast¯'{do      = Shp2,
                  args    = [3.3, 4.4],
                  char_no = 11,
                  line_no = 1},
	Exp = [#'$ast¯'{do      = #'$func¯'{do      = ["+"],
                                      type    = dyadic,
                                      char_no = 9,
                                      line_no = 1},
	                args    = [Arg1, Arg2],
                  char_no = 9,
                  line_no = 1}
        ],
  % ?debugFmt("~nin basic_dyadic_plus_vector_test_~nfrom ~ts~nGot ~p~nExp ~p~n", [Str, Got, Exp]),
	?_assertEqual(Exp, Got).

basic_dyadic_plus_scalar_test_() ->
  Str = "1 + 2",
  Got = pometo:parse_TEST(Str),
  Shp1 = #'$shape¯'{dimensions = 0,
                    type       = boolean,
                    line_no    = 1,
                    char_no    = 1},
  Arg1 = #'$ast¯'{do      = Shp1,
                  args    = 1,
                  char_no = 1,
                  line_no = 1},
  Shp2 = #'$shape¯'{dimensions = 0,
                    type       = number,
                    line_no    = 1,
                    char_no    = 5},
  Arg2 = #'$ast¯'{do      = Shp2,
                  args    = 2,
                  char_no = 5,
                  line_no = 1},
  Exp = [#'$ast¯'{do      = #'$func¯'{do      = ["+"],
                                      type    = dyadic,
                                      char_no = 3,
                                      line_no = 1},
                  args    = [Arg1, Arg2],
                  char_no = 3,
                  line_no = 1}
        ],
  % ?debugFmt("~nin basic_dyadic_plus_scalar_test_~nfrom ~ts~nGot ~p~nExp ~p~n", [Str, Got, Exp]),
  ?_assertEqual(Exp, Got).


basic_leading_and_trailing_spaces_test_() ->
  Str = "   1.1 2.2 + 3.3 4.4  \n",
  Got = pometo:parse_TEST(Str),
  Shp1 = #'$shape¯'{dimensions = [2],
                    type       = number,
                    line_no    = 1,
                    char_no    = 4},
  Arg1 = #'$ast¯'{do      = Shp1,
                  args    = [1.1, 2.2],
                  char_no = 4,
                  line_no = 1},
  Shp2 = #'$shape¯'{dimensions = [2],
                    type       = number,
                    line_no    = 1,
                    char_no    = 14},
  Arg2 = #'$ast¯'{do      = Shp2,
                  args    = [3.3, 4.4],
                  char_no = 14,
                  line_no = 1},
  Exp = [#'$ast¯'{do      = #'$func¯'{do      = ["+"],
                                      type    = dyadic,
                                      char_no = 12,
                                      line_no = 1},
                  args    = [Arg1, Arg2],
                  char_no = 12,
                  line_no = 1}
         ],
  % ?debugFmt("~nin basic_leading_and_trailing_spaces_test_~nfrom ~ts~nGot ~p~nExp ~p~n", [Str, Got, Exp]),
  ?_assertEqual(Exp, Got).

basic_blank_lines_test_() ->
  Str = "1.1 2.2 + 3.3 4.4\n\n3 + 4",
  Got = pometo:parse_TEST(Str),
  Shp1a = #'$shape¯'{dimensions = [2],
                     type       = number,
                     line_no    = 1,
                     char_no    = 1},
  Arg1a = #'$ast¯'{do      = Shp1a,
                   args    = [1.1, 2.2],
                   char_no = 1,
                   line_no = 1},
  Shp1b = #'$shape¯'{dimensions = [2],
                     type       = number,
                     line_no    = 1,
                     char_no    = 11},
  Arg1b = #'$ast¯'{do      = Shp1b,
                   args    = [3.3, 4.4],
                   char_no = 11,
                   line_no = 1},
  L1 = #'$ast¯'{do      = #'$func¯'{do      = ["+"],
                                    type    = dyadic,
                                    char_no = 9,
                                    line_no = 1},
                args    = [Arg1a, Arg1b],
                char_no = 9,
                line_no = 1},
  Shp2a = #'$shape¯'{dimensions = 0,
                     type       = number,
                     line_no    = 3,
                     char_no    = 1},
  Arg2a = #'$ast¯'{do      = Shp2a,
                   args    = 3,
                   char_no = 1,
                   line_no = 3},
  Shp2b = #'$shape¯'{dimensions = 0,
                     type       = number,
                     line_no    = 3,
                     char_no    = 5},
  Arg2b = #'$ast¯'{do      = Shp2b,
                   args    = 4,
                   char_no = 5,
                   line_no = 3},
  L2 = #'$ast¯'{do      = #'$func¯'{do      = ["+"],
                                    type    = dyadic,
                                    char_no = 3,
                                    line_no = 3},
                args    = [Arg2a, Arg2b],
                char_no = 3,
                line_no = 3},
  Exp = [L1, L2],
  % ?debugFmt("~nin basic_blank_lines_test_~nfrom ~ts~nGot ~p~nExp ~p~n", [Str, Got, Exp]),
  ?_assertEqual(Exp, Got).

basic_monadic_plus_test_() ->
	Str = "+ 3.3 4.4",
	Got = pometo:parse_TEST(Str),
  Shp = #'$shape¯'{dimensions = [2],
                   type       = number,
                   line_no    = 1,
                   char_no    = 3},
  Arg1 = #'$ast¯'{do      = Shp,
                  args    = [3.3, 4.4],
                  char_no = 3,
                  line_no = 1},
	Exp = [#'$ast¯'{do      = #'$func¯'{do      = ["+"],
                                      type    = monadic,
                                      char_no = 1,
                                      line_no = 1},
	                args    = [Arg1],
                  char_no = 1,
                  line_no = 1}
        ],
  % ?debugFmt("~nin basic_monadic_plus_test_~nfrom ~ts~nGot ~p~nExp ~p~n", [Str, Got, Exp]),
	?_assertEqual(Exp, Got).

basic_two_statement_one_line_test_() ->
  Str = "+ 3.3 4.4 ⋄ - 55 66",
  Got = pometo:parse_TEST(Str),
  ShpA = #'$shape¯'{dimensions = [2],
                    type       = number,
                    line_no    = 1,
                    char_no    = 3},
  ShpB = #'$shape¯'{dimensions = [2],
                    type       = number,
                    line_no    = 1,
                    char_no    = 15},
  ArgA = #'$ast¯'{do      = ShpA,
                  args    = [3.3, 4.4],
                  char_no = 3,
                  line_no = 1},
  ArgB = #'$ast¯'{do      = ShpB,
                  args    = [55, 66],
                  char_no = 15,
                  line_no = 1},
  Exp = [#'$ast¯'{do      = #'$func¯'{do      = ["+"],
                                      type    = monadic,
                                      char_no = 1,
                                      line_no = 1},
                  args    = [ArgA],
                  char_no = 1,
                  line_no = 1},
         #'$ast¯'{do      = #'$func¯'{do      = ["-"],
                                      type    = monadic,
                                      char_no = 13,
                                      line_no = 1},
                  args    = [ArgB],
                  char_no = 13,
                  line_no = 1}
        ],
  % ?debugFmt("~nin basic_two_statement_one_line_test_~nfrom ~ts~nGot ~p~nExp ~p~n", [Str, Got, Exp]),
  ?_assertEqual(Exp, Got).

basic_two_statement_two_lines_test_() ->
  Str = "+ 3.3 4.4\n- 5.5 6.6",
  Got = pometo:parse_TEST(Str),
  ShpA = #'$shape¯'{dimensions = [2],
                    type       = number,
                    line_no    = 1,
                    char_no    = 3},
  ShpB = #'$shape¯'{dimensions = [2],
                    type       = number,
                    line_no    = 2,
                    char_no    = 3},
  ArgA = #'$ast¯'{do      = ShpA,
                  args    = [3.3, 4.4],
                  char_no = 3,
                  line_no = 1},
  ArgB = #'$ast¯'{do      = ShpB,
                  args    = [5.5, 6.6],
                  char_no = 3,
                  line_no = 2},
  Exp = [#'$ast¯'{do      = #'$func¯'{do      = ["+"],
                                      type    = monadic,
                                      char_no = 1,
                                      line_no = 1},
                  args    = [ArgA],
                  char_no = 1,
                  line_no = 1},
         #'$ast¯'{do      = #'$func¯'{do      = ["-"],
                                      type    = monadic,
                                      char_no = 1,
                                      line_no = 2},
                  args    = [ArgB],
                  char_no = 1,
                  line_no = 2}
          ],
  % ?debugFmt("~nin basic_two_statement_two_lines_test_from ~ts~nGot ~p~nExp ~p~n", [Str, Got, Exp]),
  ?_assertEqual(Exp, Got).

basic_nested_array_test_() ->
  Str = "(1 2)",
  Got = pometo:parse_TEST(Str),
  ShpA = #'$shape¯'{dimensions = 0,
                    type       = array,
                    line_no    = 1,
                    char_no    = 1},
  ShpB = #'$shape¯'{dimensions = [2],
                    type       = number,
                    line_no    = 1,
                    char_no    = 2},
  ASTB = #'$ast¯'{do      = ShpB,
                  args    = [1, 2],
                  char_no = 2,
                  line_no = 1},
  ASTA = #'$ast¯'{do      = ShpA,
                  args    = ASTB,
                  char_no = 1,
                  line_no = 1},
  Exp = [
          ASTA
        ],
  % ?debugFmt("~nin basic_nested_array_test_~nfrom ~ts~nGot ~p~nExp ~p~n", [Str, Got, Exp]),
  ?_assertEqual(Exp, Got).

basic_mixed_nested_array_test_() ->
  Str = "1 (2 3)",
  Got = pometo:parse_TEST(Str),
  ShpA = #'$shape¯'{dimensions = [2],
                    type       = mixed,
                    line_no    = 1,
                    char_no    = 1},
  ShpB = #'$shape¯'{dimensions = [2],
                    type       = number,
                    line_no    = 1,
                    char_no    = 4},
  ASTB = #'$ast¯'{do      = ShpB,
                  args    = [2, 3],
                  char_no = 4,
                  line_no = 1},
  ASTA = #'$ast¯'{do      = ShpA,
                  args    = [1, ASTB],
                  char_no = 1,
                  line_no = 1},
  Exp = [
          ASTA
        ],
  % ?debugFmt("~nin basic_mixed_nested_array_test_~nfrom ~ts~nGot ~p~nExp ~p~n", [Str, Got, Exp]),
  ?_assertEqual(Exp, Got).

deep_mixed_nested_array_test_() ->
  Str = "1 (2 3 (4 5 6 7))",
  Got = pometo:parse_TEST(Str),
  ShpA = #'$shape¯'{dimensions = [2],
                    type       = mixed,
                    line_no    = 1,
                    char_no    = 1},
  ShpB = #'$shape¯'{dimensions = [3],
                    type       = mixed,
                    line_no    = 1,
                    char_no    = 4},
  ShpC = #'$shape¯'{dimensions = [4],
                    type       = number,
                    line_no    = 1,
                    char_no    = 9},
  ASTC = #'$ast¯'{do      = ShpC,
                  args    = [4, 5, 6, 7],
                  char_no = 9,
                  line_no = 1},
  ASTB = #'$ast¯'{do      = ShpB,
                  args    = [2, 3, ASTC],
                  char_no = 4,
                  line_no = 1},
  ASTA = #'$ast¯'{do      = ShpA,
                  args    = [1, ASTB],
                  char_no = 1,
                  line_no = 1},
  Exp = [
          ASTA
        ],
  % ?debugFmt("~nin deep_mixed_nested_array_test_~nfrom ~ts~nGot ~p~nExp ~p~n", [Str, Got, Exp]),
  ?_assertEqual(Exp, Got).

deep_mixed_nested_array_II_test_() ->
  Str = "A ← 888 999\n1 (2 3 A)",
  Got = pometo:parse_TEST(Str),
  LetAST = #'$ast¯'{do      = #'$shape¯'{dimensions = [2],
                                         type       = number,
                                         line_no    = 1,
                                         char_no    = 5},
                    args    = [888, 999],
                    line_no = 1,
                    char_no = 5},
  Let = #'$ast¯'{do      = 'let_op',
                 args    = ['A_0', LetAST],
                 line_no = 1,
                 char_no = 1},
  Shp0 = #'$shape¯'{dimensions = 0,
                    type       = boolean,
                    line_no    = 2,
                    char_no    = 1},
  ShpA = #'$shape¯'{dimensions = [2],
                    type       = maybe_func,
                    line_no    = 2,
                    char_no    = 1},
  ShpB = #'$shape¯'{dimensions = [2],
                    type       = number,
                    line_no    = 2,
                    char_no    = 4},
  ShpC = #'$shape¯'{dimensions = [2],
                    type       = number,
                    line_no    = 2,
                    char_no    = 8},
  AST0 = #'$ast¯'{do      = Shp0,
                  args    = 1,
                  char_no = 1,
                  line_no = 2},
  ASTC = #'$ast¯'{do      = ShpC,
                  args    = [888, 999],
                  char_no = 8,
                  line_no = 2},
  ASTB = #'$ast¯'{do      = ShpB,
                  args    = [2, 3],
                  char_no = 4,
                  line_no = 2},
  ShpY = #'$shape¯'{dimensions = [2],
                    type       = maybe_func,
                    line_no    = 2,
                    char_no    = 4},
  ASTY = #'$ast¯'{do      = ShpY,
                  args    = [ASTB, ASTC],
                  char_no = 4,
                  line_no = 2},
  ASTZ = #'$ast¯'{do      = [{apply_fn, {pometo_runtime, run_right_associative}}],
                  args    = [ASTY],
                  char_no = 4,
                  line_no = 2},
  ASTA = #'$ast¯'{do      = ShpA,
                  args    = [AST0, ASTZ],
                  char_no = 1,
                  line_no = 2},
  Exp = [
          Let,
          ASTA
        ],
  % ?debugFmt("~nin deep_mixed_nested_array_II_test_~nfrom ~ts~nGot ~p~nExp ~p~n", [Str, Got, Exp]),
  ?_assertEqual(Exp, Got).

variable_subsitution_parser_test_() ->
  Str = "A ← 888 999\nB ← 1 2\nA + B",
  Got = pometo:parse_TEST(Str),
  LetAST1 = #'$ast¯'{do      = #'$shape¯'{dimensions = [2],
                                          type       = number,
                                          line_no    = 1,
                                          char_no    = 5},
                     args    = [888, 999],
                     line_no = 1,
                     char_no = 5},
  Let1 = #'$ast¯'{do      = 'let_op',
                 args    = ['A_0', LetAST1],
                 line_no = 1,
                 char_no = 1},
  LetAST2 = #'$ast¯'{do      = #'$shape¯'{dimensions = [2],
                                         type       = number,
                                         line_no    = 2,
                                         char_no    = 5},
                    args    = [1, 2],
                    line_no = 2,
                    char_no = 5},
  Let2 = #'$ast¯'{do      = 'let_op',
                 args    = ['B_0', LetAST2],
                 line_no = 2,
                 char_no = 1},
  ShpA = #'$shape¯'{dimensions = [2],
                    type       = number,
                    line_no    = 3,
                    char_no    = 1},
  ShpB = #'$shape¯'{dimensions = [2],
                    type       = number,
                    line_no    = 3,
                    char_no    = 5},
  ASTA = #'$ast¯'{do      = ShpA,
                  args    = [888, 999],
                  line_no = 3,
                  char_no = 1},
  ASTB = #'$ast¯'{do      = ShpB,
                  args    = [1, 2],
                  line_no = 3,
                  char_no = 5},
  FuncC = #'$func¯'{do      = ["+"],
                    type    = ambivalent,
                    char_no = 3,
                    line_no = 3},
  ShpD = #'$shape¯'{dimensions = [3],
                    type       = maybe_func,
                    line_no    = 3,
                    char_no    = 1},
  ASTC = #'$ast¯'{do      = FuncC,
                  char_no = 3,
                  line_no = 3},
  ASTD = #'$ast¯'{do      = ShpD,
                  args    = [ASTA, ASTC, ASTB],
                  char_no = 1,
                  line_no = 3},
  ASTE = #'$ast¯'{do      = [{apply_fn, {pometo_runtime, run_right_associative}}],
                  args = [ASTD],
                  char_no = 1,
                  line_no = 3},

  Exp = [
          Let1,
          Let2,
          ASTE
        ],
  % ?debugFmt("~nin variable_subsitution_parser_test_~nfrom ~ts~nGot ~p~nExp ~p~n", [Str, Got, Exp]),
  ?_assertEqual(Exp, Got).

variable_double_substitution_parser_test_() ->
  Str = "A ← 888 999\nB ← 1 2\nC ← A\nC + B",
  Got = pometo:parse_TEST(Str),
  LetAST1 = #'$ast¯'{do      = Shp1 = #'$shape¯'{dimensions = [2],
                                                 type       = number,
                                                 line_no    = 1,
                                                 char_no    = 5},
                     args    = [888, 999],
                     line_no = 1,
                     char_no = 5},
  Let1 = #'$ast¯'{do      = 'let_op',
                 args    = ['A_0', LetAST1],
                 line_no = 1,
                 char_no = 1},
  LetAST2 = #'$ast¯'{do      = #'$shape¯'{dimensions = [2],
                                         type       = number,
                                         line_no    = 2,
                                         char_no    = 5},
                    args    = [1, 2],
                    line_no = 2,
                    char_no = 5},
  Let2 = #'$ast¯'{do      = 'let_op',
                 args    = ['B_0', LetAST2],
                 line_no = 2,
                 char_no = 1},
  LetAST3 = #'$ast¯'{do      = #'$shape¯'{dimensions = [2],
                                         type       = number,
                                         line_no    = 3,
                                         char_no    = 5},
                     args    = [888, 999],
                     line_no = 3,
                     char_no = 5},
  Let3 = #'$ast¯'{do      = 'let_op',
                 args    = ['C_0', LetAST3],
                 line_no = 3,
                 char_no = 1},
  ShpA = #'$shape¯'{dimensions = [2],
                    type       = number,
                    line_no    = 4,
                    char_no    = 1},
  ShpB = #'$shape¯'{dimensions = [2],
                    type       = number,
                    line_no    = 4,
                    char_no    = 5},
  ShpD = #'$shape¯'{dimensions = [3],
                    type       = maybe_func,
                    line_no    = 4,
                    char_no    = 1},
  ASTA = #'$ast¯'{do      = ShpA,
                  args    = [888, 999],
                  line_no = 4,
                  char_no = 1},
  ASTB = #'$ast¯'{do      = ShpB,
                  args    = [1, 2],
                  line_no = 4,
                  char_no = 5},
  FuncC = #'$func¯'{do      = ["+"],
                    type    = ambivalent,
                    char_no = 3,
                    line_no = 4},
  ASTC = #'$ast¯'{do      = FuncC,
                  char_no = 3,
                  line_no = 4},
  ASTD = #'$ast¯'{do      = ShpD,
                  args    = [ASTA#'$ast¯'{do      = Shp1#'$shape¯'{char_no = 1,
                                                                   line_no = 4},
                                          char_no = 1,
                                          line_no = 4}, ASTC, ASTB],
                  char_no = 1,
                  line_no = 4},
  ASTE = #'$ast¯'{do      = [{apply_fn, {pometo_runtime, run_right_associative}}],
                  args = [ASTD],
                  char_no = 1,
                  line_no = 4},
  Exp = [
          Let1,
          Let2,
          Let3,
          ASTE
        ],
  % ?debugFmt("~nin variable_double_substitution_parser_test_~nfrom ~ts~nGot ~p~nExp ~p~n", [Str, Got, Exp]),
  ?_assertEqual(Exp, Got).
